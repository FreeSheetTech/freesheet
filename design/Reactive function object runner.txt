Reactive Function Object Runner
===============================

What is a function?
-------------------
- Question: does a function represent a mapping of input values to an output value OR a mapping of input streams to an output stream?
- Does handling infinite streams affect the answer?
- Is recursion relevant - no place in infinite streams, or spreadsheet style evaluation
- Concept of function must always include functions with stream outputs
- Eg plus5 maps a stream of integers -> stream of integers with 5 added to them, instead of int -> int
- But for convenience want to be able to define value(s)->value functions and have it wrapped
- And functions passed to transform expressions need to act on single values
- Maybe have concept of function output cardinality, which could be either exactly 1 or 0..n
- In general, don't know whether will get 1 value out of a function for a set of input values, 0 or many
- And - input values don't come in sets - they arrive independently, and any of them can result in 0 or more new output values
- So a function that gives one output whenever any of its inputs has a new value is a special case
- Viewing functions as logic circuits that take in and emit values, not necessarily at the same time, is probably a useful view
- So a function definition defines one of those 'circuits', and a function call is an instance of it used in the app

User Function concepts
----------------------
- Possible view: Named function gives out a stream of functions, like named value gives out a stream of values
- Could view named value as giving out a stream of no-args functions
- More convenient for debugging to view named values as value streams
- Provided functions could also change at runtime
- Expressions have both functions and values as input, and combine them together - functions and values both data in a way
- Simple operations can also be seen as functions anyway, even though they will not change at runtime
- A function call combines function definition with other input values
- Another possible view: Named function definition is a factory that gives out a one-off function instance with stream inputs and outputs
  - some inputs are linked back to global values in the app or definition, and some come from arguments of the call where it is used
  - replacing the function assumes functions are one-off calls, not continuous streams
  - could still be updated if actual function definition changes


User function definition implementation
---------------------------------------
- Create evaluator tree as for a normal expression
- Put ArgRefs in where needed
- Tree is only a template - not activated
- Function Calls No args or With args do not subscribe to the user function subject until activated
- User function subject emits the definition only when it is updated

User function call implementation
---------------------------------
- Constructed with function name and argument evaluators
- When activated, subscribe to the user function subject for the function name to get the definition
- On receiving function definition:
    - Array of subjects with subscriptions to each of the arguments
    - Map of argument names (from definition) to argument subjects
    - Ask the definition for a copy of its evaluator tree
    - Get all Function Call No Args and subscribe them to the function subject
    - Get all Function Call With Args and subscribe them to the function subject - which will in turn activate that call
    - Get all Arg Refs and subscribe them to the argument map
    - Subscribe to evaluator tree as output of this function call
- Updating the definition: dispose ArgRef subscriptions to argument subjects, function calls, dispose sub to eval tree
- Evaluator should have a dispose method on it
- Need access to function subjects when activating function call on receiving definition
- Maybe all expressions should be activated in the same way

Using stream input/output functions
-----------------------------------
- Output needs to have an eval complete (EC) inserted after all the outputs for one set of input events
- Poss: Filter out EC on inputs, let function handle it
- Stream functions need to know which inputs have new events on them
- Poss: Store new values on each input until no events in progress, then send to function - but why?
- Poss: stream output functions return a multiple values object, which function call impl sends to output subject one at a time, with ECs inserted
  - works against Rx, not good for very long streams

Transform expressions
---------------------
- Similar to FunctionCallWith Args, 1 argument
- Argument is fed in one at a time from array
- Most convenient if had a callable function to use with normal functions like map, filter, etc
- To make a callable function from an evaluator:
  - Instantiate copy of evaluator
  - Get the ArgRef for in
  - Subscribe to evaluator observable and save to local variable
  - Make a context with a Subject for 'in'
  - Activate the evaluator with the context
  - Make a function with one arg that sends arg to subject's onNext, then returns the value of the variable
  - Must all be on an immediate scheduler
- If any input to function changes, need to re-evaluate where it is used, so need a stream of functions or evaluators
- Need to re-evaluate the expression it is used in each time anything changes
- So really need a stream of events with the function as their value
- Fits with everything else, because the function is the argument passed to the next expression
- Like FunctionCallWithArgs, but passing function itself rather than value from calling it
- Do you need to re-create a function each time - or just do it anyway as that's safer?
- Unlike a named function, a transform expression cannot change unless the expression it is part of is replaced
- Need a ExpressionFunction evaluator between the evaluator for the expression and the FCWA where it is used
- FCWA OR the generator needs to know the type of argument required and put an ExpressionFunction in between itself and the expression evaluator
- ExpressionFunction needs to:
  - generate a plain function as its output stream
  - not wait for ArgRefs to be filled in
  - respond to changes in input streams to the expression by generating a new output function
- So evaluator in the ExpressionFunction needs to send events to the EF even though not all its values are there
- When ExpressionFunction evaluator is activated:
  - activate its expression evaluator with context containing a subject with the special value NotUsed for the ArgRef
  - all evaluators send out a general Updated value if receive an input event and values are ready but it is a template
  - subscribe to the expression evaluator, create and output a new plain function when any value received

Transform expressions take 2
----------------------------
- Problem: generating a plain function is difficult as it is difficult to force Rx operations to be synchronous
- So maybe use the evaluator in a transformer object which has an input stream and an output stream
- Feed the values from the sequence into the input stream
- Subscribe to the output and turn into an array
- The input stream needs to complete to make the output array be generated
- Need to have an Eval Complete after each input stream value to make the evaluator work
- BUT probably more complicated than problem of generating a plain function
- AND cannot use standard functions - both lodash and Rx need plain functions
- AND hard to write new functions

Callable function from evaluators
---------------------------------
- Poss: find a way to make Rx work synchronously
- Poss: generate different kinds of evaluators that do own synchronous observer management
- Poss: go more low-level in Rx
- Poss: evaluators responsible for returning a function that does what they would do
- Could be achieved with a getCurrentValue call on Evaluator, pass in named argument map
- Some evaluators may not be able to do that, like stream functions, but ok not to allow those in transform functions
- Maybe optimise later for values that cannot change
- SO evaluators can act in two modes - pull and push
- Probably don't need to copy the Evaluator tree, so may be able to remove that code
- Can't use _calculateNextValue as this doesn't work in template Evaluator trees

Using local names from an aggregate
------------------------------------
- Maybe add names to argValues as progress through arguments
- Names will lead to FCNA being created by generator
- Treat similar way to arguments
- Create subjects where necessary attached to the names
- Could become a general implementation of local names in expressions
- Evaluators can have local names
- Local names are attached to observables
- Local names are added to the context passed to sub-expressions through the activate chain
- They exist only within the expression where they originate
- In an aggregate, the item names become the local names
- The observables for each local name are the same as the observables for the arguments
- FCNA needs to be attached to local names as well as wider context
- Local names should be searched before global names, and before local names in containing expressions
- Maybe move to general concept of name reference instead of ArgRef and FCNA

To Do
-----
- No null from Input when created
- Turn off debugging prints
- Refactor FCWA
- Ensure all Evaluators deactivate correctly
- Refactor dummyArgs
- When/which should evaluator send out Updated
- TODOs in code
- Rx v3
- All values instead of distinct on value changes
- unpackLists: direct result has more changes than formula using it
- More info on expr and value and evaluator reference in CalculationError
- Ensure everything goes through error checking
- Consider provided function implementation - transducers?