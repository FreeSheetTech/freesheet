Input and output mechanism
==========================

Inputs
------
- Simple option: have an input function eg answers = input("answers")
- BUT not DRY, name could differ, could use inside formulas, don't know all names until called, runner special case
- Language option: name = input
- AST: Input object
- Parser: new case for function definition top-level expr, but not anywhere else
- Runner: call addUserFunction, create input name mapped to user subject
- Runner: getInputs -> List[String]
- Runner: sendInput(name, value)
- Sheet: delegate all above
- Worksheet: 4th column with button.  Click button for pop-up dialog to enter new value
- Probably useful to add type info to the input
- If inputs are typed, can the types of everything else in the worksheet be inferred?
- If inputs are typed, can input validation and UI form be generated automatically?
- Documents what expected, allows auto validation, removes a big source of errors
- Any reason why inputs cannot be used as outputs like any other function?
- Inputs may be outputs of other sheets
- What difference between calling functions in other sheets (if you can) and inputs from other sheets?
- 'input stored' keyword to mean the input is built up into a list
- Save with sheet - as JSON at end of text file
- OR save inputs separately
- State = history = input list!
- But inputs may also come from external data sources like web documents
- How specify that?
- Or is the input just the URL, and use a getData function
- What difference between inputs and parameters? Essentially none, but different emphasis?
- Or inputs for settings and non-stored input events - again could treat the same, but different emphasis
- An input could be a URL of the actual data - how does this fit with functional model?
- Should regard data retrieved from URL as the input, and the URL is just a way of specifying it


- Need to link to sources, like another module's outputs
- Need to be able to put an input into a worksheet and see the result
- Need to be able to see all the inputs that have happened and the output events created
- Mark values as output values to save history, whereas others just have current value?
- See output event history
- May have an input validation module that works on page inputs and sends events to core module (like old batch systems)
- Will need to snapshot state of some inputs when an event occurs eg submit clicked
- Linked with testing
- Linked with event history
- Runner has history besides current state
- Rewind and step through would be good

- Should inputs pull from another sheet, or other worksheets send inputs? First seems more with spirit of Rx

Runner
------
- Could provide named streams to it in same way as add user functions
- Could save everything that comes in on each input in a list
- Also need a merged list of all inputs
- Timings on each input needed for some things
- Outputs also need to be saved in a list
- Link outputs to the input event that caused them
- Rewind - would need to replay to that point
- Could change inputs if rewind, play to change, do change, continue
- May need different schedulers where timing effects involved
- OR could make it client's responsibility to save events
- OR make it another layer around the runner - keep runner simpler, separate concerns
- BUT then runner can't calc a new function added BUT is this really needed in core runner?


Worksheet
---------
- Need a way to add an input
- Need a way to view inputs
- Need a way to rewind or replay inputs
- Need a way to view outputs
- Also useful to view history of non-output streams for debugging
- Poss: tables to left for input and right for output, with scrolling, same rows as worksheet


Testing
-------
- Give a merged sequence of input events
- OR a set of separate input event sequences with relative timing
- Give an expected sequence of output events
- Save canned sequences of input events and pull in
- Timings on input events, relative to previous

Stores
------
- State != model
- Store is for 'state' derived from inputs
- Not all inputs will affect state eg button clicks
- Model will include input-derived parts and parts from other data sources
- Inputs to sheet may come from an external data source like a web api
- Those will vary over time, so must be inputs to keep sheet ref transparent
- Sheets for different purposes need different kinds of store
- May want to connect same sheet to different data stores
- Sheet store: bound to sheet - when using as a local document manipulated as a file
- Local store: bound to browser where use sheet
- Remote individual store: data for one user, on web
- Remote global store: data for all users, on web
- Remote individual/global store with local storage cache
- Local store just sends on input events
- Input events use timestamp of data they were based on?
- Just one store?  What if need diff storage for different inputs? Eg user shortcuts and global data in accounting system
- Prob best to have one store per sheet, use different sheets
- Stored function - passes on after storing to a specified type of store
- Pulls stored stuff back in
- Stored could be used for calculated results as a cache too
- Add storage provider from outside to keep sheet pure
- Can be configured to store events on one or more named values, may be calculated
- Has to inject the events back in on startup
- May only need to keep latest
- Needs to keep same order across all named values
- Needs to listen directly, not to aggregated events

Storage of constructed model entities
-------------------------------------
- Eg account, with balance - need to store

Caching
-------
- May want to cache certain important functions that form the model
- May want to persist that cache
- Is this done by the sheet or externally, and tell the sheet it has a cache?
- Cache may include many calc values of which only want one at a time
- Some way of feeding in accumulated values to a stream which then takes new inputs and sends out new values to the cache

Outputs
-------
- Outputs could just be called functions in 'dirty' sheets
- Results of the functions could be error or unit
 - Have (out-of-band?) info attached that shows whether a new or a stored value - useful for output functions
 - Have a treat-as-new function to strip this and replay everything

Separation of concerns
----------------------
- Input source should not be in the sheet
- Store location/implementation should not be in the sheet
- Store *type* *could* be in the sheet - important for semantics
    - could be ignored in test mode if necessary
- Probably better to regard sheet as pure calculation, add storage info after
- May want to store different things in different ways in different uses of the sheet
- This allows much better unit-testing and reusability and safety
- Runners may be responsible for storage providers
- SO how do you attach these things?
- How do you link sheets to page inputs?
- How do you link sheets to each other?
- How do you keep DRY by defaulting inputs with expected name?

Linking sheets to inputs
------------------------
- Could link an input on a sheet to a source of a known type eg a stream or a callback that sends values
- Could link all inputs to a stream or callback that supplied name+value

Linksheets
----------

- Inputs bound to worksheets by connector sheets
- May need manipulation to adapt data source to what expected - so need calculations
- Can you restrict connector sheets so have to use a worksheet, or could you do whole calculation in a connector sheet?
- How work with input and output?  Separate sheets?  Different parts of sheet?
- Easier to understand if same format as worksheets?
- Easier to understand if different?
- Linksheets
- Autogenerate for inputs (and outputs?) on a worksheet
- May want multiple uses of one output on worksheet
- Need auto output for page templates
- Link to one worksheet by id?  Or pull from downstream worksheet?
- Can define other names as may need to adapt/combine inputs
- Linksheet Inputs: name of input, formula producing value - can use i/o formulas referencing inputs eg from page or web
- Input formulas can only reference functions in the linksheet
- Linksheet outputs: functions with side-effects - do they need names?  What are the values?
- Can outputs *only* reference values from the worksheet?  If can ref values in linksheet, can do everything in the linksheet
- Can linksheet values be used in page? If not, forces you to use a worksheet.
- Is store specified with linksheet or worksheet?
- Is store specified for each input or for whole sheet?
- Kitchen/store hygiene analogy
- Outputs can be done later so long as have default output to page
- Are outputs other than to UI rare enough that can attach in separate output sheet, different to link sheet?
- Time: that's an input, as it varies

- Linksheet has to:
  - Know which worksheet it is connected to
  - Get inputs via input functions
  - Send input events to worksheet
  - Store input events if they need to be stored
  - Replay input events from the store on startup

- What about storing result of quiz long term?  Two worksheets - one for UI, one for learning results?
- Or just different 'layers' of formulas within sheet that feed each other

Links 2
-------
- Just declare inputs in sheet
- Specify an input source when it is used in an environment like a page, but sheet doesn't know
- Simplest thing is just 'page' or another sheet name
- Add name mappings later if needed
- Editor shows input source in dropdown - 'page' is default
- Create input senders after loading sheets

UI Inputs and actions
---------------------
- If inputs pushed from page, makes sheet more testable, reusable, independent
- Could be independent of UI style eg command line, server-side UI
- *** If doing validation, good to be able to reuse input sheet on server side
- Validation, reflecting/clearing inputs all needed whether local or server-side UI
- Need to show error messages
- Already connecting page to output values independent of sheet, so why not input side?
- Would remove input and click functions and just declare named inputs
- Can send inputs any way you like, but a naming convention matching field names to inputs would be easy
- UI components - how condense concept of paired input and error streams and split valid and invalid inputs into a reusable thing?  Fancy clever bricks
- How generate default UI from specification of input required by main sheet as an aggregate with input types?
- Parameterised worksheets as components?
- Learn from web components?  Content? Nested components?

Links 3
-------
- Any sheet can be a datasource for another
- Datasources don't have to be sheets - could be other objects
- A web component could be a datasource for the inputs on the page
- If sheets are web components, start to get a unified view
- Active output components could be linked to sheet components
- Need a convention for linking sheets - just id on each and data-source or data-sources to refer to others
- Maybe links by default just match names, but can adjust names
- Each component configured with its inputs - output destinations never specified, no link sheets
- A component can also be given an input directly in attributes - good for configuration
- When re-using a Freesheet component, inputs wired directly to attributes
- If it gets complicated, have option of introducing a sheet just to define wiring between components