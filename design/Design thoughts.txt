Design thoughts
===============

As a learner or teacher building pages, non-technical but computer-literate,
I want an easy way of calculating values to use in the page

(Original) Requirements
------------
- Easily create a table to be used as a hidden worksheet
- Use a visible table as a worksheet
- Cells can contain formulas, including literal values
- Formulas resemble Excel formulas
- Functions in formulas should be easy to add - just JavaScript functions added to certain object? or global?
- Calculated cell values update named values that can be used in other formulas
- Named values can be used in Spacebars template fields anywhere on the page
- Calculations update automatically
- Formulas can bring in values from outside worksheet with functions
- Outside functions should include input values and time


Thoughts
--------
- Outputs: very useful to separate from private intermediate result expressions for (a) maintainability (b) uncluttered result to use elsewhere (c) testing
- Separate outputs by naming convention or declaration
- Output may be single value or sequence or aggregation - but there is only *one* per function - or is there?
- Multiple outputs: should we allow multiple named outputs as a shorthand for/alternative to an output map?
- Multiple outputs: what people expect in a worksheet
- Multiple outputs: they may not all change at once, could be separate streams
- Defining named functions then combining them again into an output that just repeated the names would be confusing and non-DRY
- Should you have reusable functions with just one output and worksheet object with multiple values?
- Unified view: functions can have several named outputs, and internal functions, so overall program is one outer function with several named outputs
- Named values are defined as functions, anyway
- Maybe worksheets are more like namespaces, and functions are just at top-level, and are different
- Maybe only top-level named outputs become separate streams - nowhere to refer to them as an aggregate anyway
- Need to wire outputs into actions somehow, as well as just tracking and displaying
- Maybe output event streams - which is what they are?
- Output effects: call a function which has a side effect and may return a value
- Output values: may be complex with much info about the output, generally all info that went in eg ajax url and payload
- Testing outputs: really need to turn off side effects and check the returned value against expected
- Output examples: play sound, make ajax call, change page, get/set local storage
- Testing with mocks: could be necessary, substitute other functions called with mocks
- Stubbing syntax: just list of functions to stub
- Connector block worksheets could help to wire reused functions to a particular page
- Need to be able to use functions as first class objects - it is FP, after all
- Do functions have to be defined separately or can they be nested within another sheet?
- How do things like filtering on input or adding a value to a column
- Should every worksheet have defined inputs and outputs, and input sources have to be wired in separately?  How define? How wire?
- Or should this be optional - reusability vs convenience?
- Should functions be allowed to pick up external values directly within formulas as well as their defined inputs - a bit like implicits
- Worksheets are functions mapping zero or more event sequences to at least one output event sequence
- If no aggregation over the input streams, always use latest value from inputs, could be equivalent to function mapping set of values to outputs
- Easier if regard all functions as taking streams, even if the stream just has a single value in it
- Values of input and output streams can be any simple or complex type
- Sets of named inputs and outputs naturally form maps
- Functions can be applied to and can return any simple or complex type
- A function is defined by a named worksheet and can then be referenced in formulas
- A function from one simple value to another might be cumbersome to define as a worksheet
- Need syntax to define inputs that must be provided
- Inputs could specify the data items and types required
- Functions used in foreach expressions - do they take stream of input values, and can they do aggregation as they go?
- Definition and instance separation - named worksheets at top level like objects, what about when used in formulas in many places
- How to implement reuse in different places
- How to show reuse to user on work page
- Changes in outputs due to changes in inputs are just new outputs in the stream due to new events in the input stream(s)
- Data at rest needs to be converted to and from streams to go through functions
- A data worksheet is just a function with no inputs that produces a stream with one output value
- Output events can be connected to widget actions in some way - or just raise DOM events to link back into jQuery
- Should be easy to drop back into jQuery
- Output events will often be when a button and another stream happen together
- Built-in action widgets to control browser eg go to page
- May want worksheets to be visible as quick UI - or hide the formula columns
- Data load should just be a function that returns an input stream, single complex value, include anywhere
- May want to include function results as top-level definitions on the page - could just be named worksheet with one unnamed row
- Re-use worksheet functions from any other page - just has to be a parseable table
- Or keep worksheets in script form
- Could publish pages of library functions - just put documentation and examples on the page with them
- Consider saving all inputs in dev mode to replay when a formula changes
- Maybe all function streams should have distinct on them
- Testing facilities important - eg table with input event rows at top and output events below, with columns at particular times
- Must be easy to think *how* to test
- Maybe record events and times to create the table
- To test like this the inputs need to be explicitly named - another advantage
- Could have functions that emit events over a period eg a sine wave for animation physics
- 'Wire up' a worksheet by calling it as a function in another sheet and passing in input streams created by calling functions that create streams from environment
- Need to unify functions, fixed datasheets and simple values and be able to substitute one for another
- Function inputs specified differently to outputs
- A function actually just has one output - may have several parts - may be an aggregate expressions
- Calling a function (at least one with no args) should be substitutable for specifying it inline
- A function with no inputs and just an output should look the same as a data value
- A worksheet at top level of page with no inputs looks like a data value, but may still have formulas
- Instantiation: top-level worksheets with no inputs will normally be objects on the page
- Functions: how distinguish functions with no inputs from top-level value objects
- Functions with no inputs can still reference implicit inputs, such as form fields or data retrieval - at least in a "connector" sheet
- Function call in a cell may expand to a big multi-level table
- In tables, a function with no inputs and just a simple output is represented by a single formula cell and its value
- More flexible with values in the same cell as formula, like Excel, with styling to show one or other or both - could easily use CSS to look like two cells
- Can use monitor table as simple display, fixed values don't look silly, more like Excel, can show formula in many different ways
- One value, one cell, but may expand
- At page level, named tables are like top-level defs - may be just a single cell with a fixed value or a single function call
- How does this fit with templating like Blaze - just independent?
- May need to choose how/which worksheet values are transmitted to other template mechanisms
- So if you have a worksheet like the sheet1 price calculator, that is a no inputs function with a map output - or is it a group of separate named outputs?
- Inputs to functions - are they a list, a list of names or a map?
- May be useful to tailor the auto-display of a function, to hide/format certain values, but also may be best to treat as just a debugging aid
- Toggle display button - framework could make any element with a certain class be a toggle
- Table with 1/2 columns indicates list or map
- How distinguish single value/list of 1, and null/empty list - do you need to?
- Liveness - edit in page in both edit and display mode
- Page with final user-editable formulas
- Event history stored and can be displayed to help debugging
- Compare xslt fp and sequence usage
- Functions can return functions
- To store program just store original source or Json representation
- Can email source to people and they can cut and paste it elsewhere
- Templating: just edit page wysiwyg and put tags in, including repeat tags
- Parse to tree and construct stream net after
- Generate Js to create stream net
- Sep parts of formula and show in separate spans so can highlight
- Expand to formula above
- Can show values of any expr not just named values
- Syntax - keep like Excel and have = before every formula, text taken as string literal OR JS-like syntax with quoted strings
- If outputs of a function are just named values, have to 'wire them up' with another function
- App - just a bundle of functions, of which you can run one main one, possibly more?
- Running a function isn't a one off thing - it sits there continually waiting for input
- You don't really run a function - you start it
- Use as part of another program
- Transform streams back to values and use as synchronous callable function in a conventional program
- Use as a scripting language
- Continuous pipeline command processor
- Function params auto taken from CLI arguments
- Return kind - can we just say everything takes and returns streams, and if provide a built-in that uses plain values, need to wrap it before adding?
- Arg list - some functions need to take values as args, not streams eg for use in combineLatest
- Can UserFunctions always use streams, built-in need to specify?
- Can we/should we call no-arg functions without brackets - optional or not?
- Recursive functions: allowed? how handle them?
- Will need stack overflow protection - maybe time of last input and how many times been through a function for same input
- May want a non-reactive implementation of all functions
- May want a non-reactive implementation of functions that are only used within other reactive functions BUT lose the debugging
- You really need user testing to know if real non-technical users will find this easy
- Embedding: being able to add built-in functions to script your app is a big win
- Smart Subject for web service result that uses cache headers to know whether to re-request each time it is asked
- Live tutorial that gets you to type in expressions and see result, and saves your answers to review
- Sandboxed - when used as embedded scripting language, can run only the provided functions, so no danger, like with Groovy
- Specification language: process AST to translate into English-like description, or graphical form
- Rules engine - way for users to change business rules in a system
- Emphasises steady values (signal) over changes (event) - different to most FRP systems
- Could view sheet/program as a function from a sequence of events (on many streams) to an output.  Then don't need to worry about individual events.
- Should inputs be regarded as events or collections of events or just a signal ie do you need to say collect() or latest()?

Local values within expressions
-------------------------------
- Or local functions
- Syntax is an issue
- Implementation is an issue
- Poss syntax:
  - _items in aggregation are ignored - but what if result is not an aggregation
  - nested name = expr definitions within an expr that is surrounded by delimiters - maybe round brackets
- Expressions used as transform functions will also have local values

Input functions that take expressions to identify the item
----------------------------------------------------------
- Does it help to look at these as being a map containing a collection of named inputs to the functions
- In word quiz example, page inputs can't be set up as separate streams because don't even know what they are until runtime, because generated from same expr that uses them
- So have to regard page inputs as a single stream with named elements
- Or regard page inputs as a function - everything can be a function
- Individual page inputs may not be there when ask for them - eg if generated by outputs of function
- The input function is actually a stream of functions that has to yield a new function whenever any of the inputs change
- And it is a stream of functions with arguments - don't have those yet for user functions, but need them

Code generator
--------------
- Recursive expansion of AST elements
- Function calls get stored as they are encountered
- Need to recreate precedence of bracketed expressions as they are lost in parsing

Time
----
- now() function represents current time
- now() has to be a stream that updates so that formulas that use it update
- if it changed every millisecond, would be too much computation
- now() updates every second
- Later: have different resolutions of now() eg now(100) to update every 100 ms
- For countdowns, better to have a stream that stops to reduce CPU usage


Programming environment
-----------------------

- Can run any function loaded
- Can run any expression
- Auto ask for arguments if run function with args
- Auto find implicit inputs requested by input functions
- Show evaluation sequences as input event streams and output values in columns with one event per line - vertical marble diagrams
- Recording debugging shows state after each event
- Testing uses exactly the same format
- Save incorrect run as test
- Can edit events at any point in stream and have the run re-evaluated
- Edit expected values on output side when it is a test
- BUT can also suppress the recording and just have the latest
- Where only interested in sets of events, may have all input events on one line
- Take care in order of events across line just in case a bug causes it to matter
- Influence - expression evaluation in debugging functional programs
- Error eg type mismatch results in Error, display message in cell
- Can use own styling in an HTML worksheet table eg for comments/headings
- Separate streams might lead to better debugging, but maybe better to use tools to evaluate highlighted exprs on the fly
- Can add any expression to worksheet at any time, so can have a tool where highlight an expr and it shows value in a popup
- Can add own JS/CS functions
- Click/hover to see documentation for functions/parameters
- Choose from functions available
- Worksheet tool needs AST to give help and debugging tools
- Could inject a value direct into any defined name in the same way as adding an input to see effect or test partially completed worksheet
- Enter inputs and see history build up
- See history of inputs from other sheets
- Could have grid at left showing inputs for each input row
- Only input rows have it and one row used per column
- Litte value in showing values in input grid
- Could have dots in input grid with hover and show output States when click on it
- Would need to show intermediate states at that point for consistency
- Could just have history col to right of values shared by inputs and outputs as they are in Different rows
- Do this later - time travel debugger prob a nice to have
- Alternate view is vertical list of input events with name and value
- Click on each to see state at that point and highlight changes
- For large arrays of objects, show as table if seem to have "similar" keys in each object
- Display headings and 2-3 rows, with expansion options to see all, maybe paginated
- Inputs defined at top of worksheet, can enter values for testing in col 2
- Good to keep worksheet similar to text: preserve blank lines and comments, but formulas may span several lines and parser ignores them
- Static analysis: tree of all functions that feed into this one
- Enter complex formulas in a nested table format
- Copy and paste worksheet - text by default, comment indicates it is a worksheet
- Bare worksheet documents for re-use or server-side - but always a need for documentation so could use for that
- Edit link when viewing own pages
- Switch/case statement shown/edited in mini-table
- Aggregate constructor as mini-table
- Other expressions as mini-table?

Server-side worksheets
----------------------
- Great if can edit server-side docs in same place as client-side docs
- Server-side docs usable just by referring to their URL
- Client-side docs can be used in others - copied in, work locally
- Server-side docs can be linked in to others, can see data on client but not edit, updated by pub/sub,
- Doc uses server-side sheets alongside local worksheet
- Having server-side sheets probably have to be only on a paid plan - or limited number/use
- Fire up worksheet instance when request comes in for it - when to kill it?
- Shared and per-user storage
- Whole doc is server-side - may have several linked worksheet modules
- Many facilities would have to be per-user eg send email
- Do you need a per-user instance of worksheet if it uses any per-user data?
- Server different from doc editor
- Server has a doc dir, can both run and serve up sheets for re-use or editing
- Worksheets may be embedded in docs or standalone text files
- Server needs to make worksheet avail to client even when running
- Doc editing app is just a CMS - can run alongside on same docs
- Doc editing is really just a standalone page able to push docs when saved, plus browsing
- Doc dir can be linked with Github or whatever
- Or maybe running and serving/editing are two separate apps
- Need sign in to edit, need for some facilities when running
- Should definitely be document oriented, not database
- How manage listings, permissions etc
- Pub/sub Changes best sent as JSON for interop with other apps
- Wake up same as restarting after failure - need persistent
- Could scale horizontally by having multiple instances of worksheet
- Mongo store also good for inter-op
- Scala/Java implementation of lang, with/without Rx, entirely possible
- Server-side sheets allow real-time games
- This could do everything a real-time app framework (M) could
- Subscriptions: client only subscribes for updates from server for worksheet items it is actually using on page - worth it?




Named values
------------
- Can subscribe multiple times to a named value
- Each subscription gets the current value (even if null) then changes
- New subscriptions do not get a replay of all values
- The named value can be reassigned to a new formula
- The initial value of the new formula (or null) is sent to subscriptions

Connection to page
------------------
- Init engine by adding built-in functions, including "input grabbers"
- On load, read worksheet and add named formulas
- Link outputs to page by setting their values in a ReactiveDict
- Link references in page via val helper, or via hook into lookup
- Show undefined formulas in worksheet on page


Issues
------
- Should inputs be explicit or just allowed anywhere in worksheet?
- Should outputs be explicit or just have any named value be an output?
- Input functions are different because they transform non-cell/stream objects, or nothing, to cells/streams
- Internal functions always act on cell/stream and produce cell/stream



Reusing functions
-----------------

- Create separate worksheet
- Name the worksheet
- Define expected inputs with names - even if just one
- Maybe just put 'input' instead of a formula
- Use it in a formula with the normal function call syntax
- Need to copy the structure to each place it is used?
- If do that, how can you modify it in place?
- Possible: decouple each copy from its usage so that a new one can be wired in - aggregates would be wrong
- Is there a way of sharing one instance with different streams?
- If it had no aggregate functions, could just treat it as a single-value function and many streams could share
  - might be an optimisation for simple value transforms like date formatters
- Can ask the function for an instantiation of itself - if that is the same or different every time, doesn't matter
- The function is responsible for updating its current instantiations if its definition changes
- In user workbook, how know which input and output values to show on the display?
- If only one usage, can show that one
- If click on a formula that uses the function, show instance for that function
- Import just by calling an import function and giving it a name - named values can also be functions
- Functions may load dependencies transitively
- If all worksheets are pure and effects have to be explicitly connected, makes it safer to reuse others' worksheets
- If all worksheets are pure, they will be far easier to re-use
- If users can create impure worksheets, they won't be bothered to clean them up for reuse
- Testing much easier with pure worksheets
- How import functions?
- Are there sheets which just have functions for reuse, no input/output?
- A function with params that also depends on internal values in a sheet can be re-used in other sheets: client gets a stream of changing functions

Reusing across the web
----------------------

- script tag with src
- if have fragment on src, pick out the script with that id
- imported sheets can only have safe functions
- can store in git repo?
- Heroku would need to use S3, prob better anyway - but don't force local server to use it
-


Managing subscriptions and user functions
-----------------------------------------
- Need to handle non-existent user functions named in other functions - show error value - instead of null used now
- Need to clean up subscriptions when a user function is redefined
- Need to clean up subscriptions when a user function is removed
- Need to handle removing a user function after it has been referenced and subscribed to in other user functions
- Maybe no direct subscriptions - do everything through a broker (allChanges?) that gives error if no subject defined
- Code generator has to save all streams it creates and have a means to dispose them all
  - does disposing the final stream returned do that?
- Code generator knows all the functions it has used and returns them, so can find out if a named function used
- If introduce error value into user function subject if not defined when referenced, or removed, can propagate that
- Can use hasObservers and dispose on Rx.Subject
- If remove a user function used in other functions, then same situation as if it was used in a function before it is defined - send null or error
- Need to handle situation where user function is removed, but subject kept because used in another function, then that removed - need to clean up first one
- Changes: good if only had one change per function per input eg total depends on a and b, b depends on a, a changes, total emits two changes
- Does the set of observers need to change depending on the current values of the expr - or does Rx take care of that?

Error handling
--------------
- Syntax errors in parsing:
    - catch exception in TextLoader
    - Cannot get event from Runner because don't have function definition
    - Remove name from runner - which will send value change to null if it was there
    - TextLoader trigger onFunctionChange with error
    - TextLoader also passes on function changes from runner, decorated with beforeName
    - store bad text in TextLoader
    - save bad text in text file
    - handle invalid syntax while loading from text file

- Calculation errors while running:
    - catch exception in runner - where?
    - Detect invalid operations eg divide by zero, divide strings which give Infinity or NaN
    - Detect uses of undefined names
    - Catch TypeError from calling undefined function
    - return the error as the value of that expression
    - error has full details of which function and what values
    - if error is an input to any other expression, the result of that expression is error too, linked to original
 - propagated errors link to the original error
 - all provided functions should check the types of their arguments and throw useful error if not correct

Teaching people to use it
-------------------------

- Build up a worksheet which does something interesting, like playing a game
- Have people fill in formulas one by one
- Check answer
- Some people will never get to events, so do that later - pay for what you use
- In tutorial games, time how long it takes people to answer questions so you know which are the tough ones
- Compare to familiar things eg big expressions vs separate defs -> one long sentence in English vs separate definitions
- You are just saying what things mean, and you need to learn a few words
- Examples with step-by-step instructions for those that want them
- Like Lego/Meccano construction examples
- How you think about the problem, what questions to ask
- Cross-ref with HowTos and techniques and reference info
- Analogies: fried(whisked(broken(egg))) - vs steps
- Speak Freesheet
- Freesheet phrase book
- Events vs signals - both views useful
- Cooking ingredients - ready made vs from scratch


Domain modelling
----------------
- A worksheet is a function mapping a set of input event sequences to a set of output event sequences
- Or maybe a single sequence of input events to a single sequence of output event combinations
- Actually a function mapping these things plus a sequence of formula settings to outputs, but more useful to assume those all there
- Very important: which output events are there after each input event - how define that?
  - possible: sequence of input events maps to a sequence of event sequences of the same length, with zero or more output event sequences
- Needs to be output events, not just values, because you need to know when that value occurred
- Events need to be timed as that will affect the result in many systems - so each event has a time
- Time itself will be part of the input event sequence
- Or view a system as a function from a sequence of prior events, plus one more event, to a sequence of output events
- Output event that happens at a certain time after an input actually depends on the time event, with other input part of prior sequence
- Connects up with the idea of state being the history of an object
- Current value is init state with every update folded in
- May need to snapshot state at intervals - manual or auto, each year or after every update?
- Which connects up with setting up test data by performing sequence of operations on the system
- Any system can be seen as a function from a sequence of events to a set of outputs and/or a set of output event sequences
- The model could be seen as a set of functions, some with params, giving individual outputs
- Or could view as event sequence plus output selector plus input params to output
- If have played a sequence of events, gives a new model function based on events to that point - like currying
- Or could see some functions as updaters that yield a new model
- Some special cases of models don't depend on history of events, only current inputs, but rare
- In general, data and functions can be equivalent (eg map vs function)
- So state represented as data can also be represented as functions
- Example: in bookkeeping system, balances on accounts are total of postings
- Entity functions: idea that will usually define some intermediate functions that represent entities like Account
- These entity functions are good candidates for caching/persistence, so don't have to recreate from scratch on every calculation
- EFs could be marked to be persisted automatically
- EFs can form a bridge to traditional database world
- EFs can substitute their cached value when needed
- Some inputs may become EFs directly eg Transactions

Output events and output functions
----------------------------------
- One input At a time, all outputs
- The outputs that change on each input are significant but need all of them
- Non output values still useful for debugging
- Input event sequence will give a certain output event sequence plus a set of functions that give certain results when called with certain params
- OR there is a set of functions that can be called to get an output value (may be complex)
- the output value updates as more input events arrive
- if the output function has params, get a different instance of the updating output view for each distinct set of params
- The output value instance is actually a sort of mini-worksheet it self
- A function defined in a sheet is only referentially transparent if it does not depend on any other changing values in the worksheet
- SO - should a something like a P&L report with from and to dates and complex output structure be a function or a separate worksheet?
    - Function with params is logically what it is
    - Output values updates like a worksheet
    - Params coud be regarded as worksheet inputs
    - Complex to write without local definitions
    - May want more than one instance around at once
    - Balance sheet with single instance fits fairly well - separate connected module
    - Would be tedious to have to make every function with an aggregate output a separate worksheet
    - Worksheet can have independently observable output values
- ** Functions give you a reactive view
- The view may only be of a single scalar value
- If the function takes no parameters, equivalent to a view on one of the output event streams
- Output views only exist if a client has created them, as v large number of parameterised views possible
- Output views like additional reactive functions attached to main one
- In a multi-user app the output view may just be for one user


Worksheet instances
-------------------
- A worksheet can have multiple instances
- No point in having multiple instances if no inputs
- SO having inputs means a worksheet is only instantiated when inputs supplied, can do so many times
- Worksheet with instances could represent reports for different input criteria
- A worksheet may represent something with many instances, like an object in a game
- A worksheet could create other sheet instances
- A test worksheet uses or includes the worksheet under test
- Definition vs instance/scenario - not there in excel - teaching point
- An instance is a definition plus a set of inputs
- Need to save instances as well as sheets
- Scenario is a sequence of inputs and corresponding output signal sets
- Should sheets in a workbook know about each other?

Instances and inputs
--------------------
- Some sheets may not need any previous data and just take event inputs, so all instances the same
- Some sheets may have only single-value inputs
- Some sheets may need a large input history
- Difficult to work with two files at once
- Idea of templates in word processors and presentation apps
- Access DBs saved data with definition
- Maybe need a Save as Template option - just delete the inputs
- May want to load from web and supply single value inputs as query params
- Some sheets may need to update - get a snapshot from inputs and close
- Some answers may be provided just by calling a function with supplied params


State as history
----------------
- Proposal: any system can be represented as a function from sequence of input events to sequence of sets of output events
- Common idea - database inserts/updates/deletes or tran log from day 1, git repo commits, current state of a house
- History saved anyway in many systems
- Like Fowler's Event Sourcing
- Need ability to snapshot and truncate history in some systems
- To persist, need to store history OR store current state of EFs, or some combination
- History of input events should be implicit - don't need to explicitly collect?
- Testing relies on specifying a sequence of events and checking the resulting state
- Should be able to add a new function that depends on history and have it automatically calculated
  - leads to conclusion that all history must be kept, so an input is always a stream
- Some functions will act just on the latest value of the stream, some on whole stream
- How express CRUD functionally?
- Sequence function view valid for any system not just sheets IF self contained modules
- Chess game is classic state = sum history example. Or football league.  Or FA Cup
- Football league order less significant.  FA Cup v much so.
- How express FA Cup functionally.
- May be useful to have intermediate functions that summarise inputs to make output calcs easier eg balances feeding P&L, BS, TB
  - these intermediate functions sit in same place as the state
- Even if can't implement that way, functional def acts as an invariant
  - could be used as for testing or integrity checking
- Materializing the domain model as state - when do you need to?
- Log function also useful to see what changes have occurred in a value - in dirty sheets only?



Sum vs fold
-----------
- Competing views:
  - state as functions with sequence of input events as input (sum)
  - state as data with functions with previous state and event as input  (fold)
- Sum-type more flexible and easier to write
- Fold-type closer to current ways of thinking about state, easier to persist
- Everything is a fold in the end even smaller more focused functions - even sum



Web service
-----------
- Could run a sheet as a web service
- POSTs are sent to named inputs
- GETs are for named values or named functions when can have params
- Control channel to upload or change or view the worksheet while running
- Important to be able to see the sheet in real time while running
- Could send out changes via DDP or other pub/sub mechanism
- May also want to get and set a bunch of inputs together eg for configuring settings on an app


Modules
-------
- Useful for design and test
- Output of one module usually input of another
- Can be sheets in a workbook
- Programming env shows in different tabs - like Excel or IDE
- For constants, reference data, I18n constants

Auto storage
------------
- Would allow use of FS as one part of a system, other parts read the DB
- Meteor could use existing client side update mechanisms
- Updates would have to be done by calls, not act on local collections
- Need to detect which entities changed eg which account to update when new posting
- Could start by saving/loading all event history, recreating state, and learn from that

Testing
-------
- Tests as connected worksheets driving another one
- TDD by setting scenarios in worksheet then filling in
- A test is a function from a sequence of inputs and a sequence of expected outputs to a result comparing the actual to the expected
- Test is a scenario plus expected output states for some of the inputs - often just the last
- Tests will want comments for single or groups of inputs
- Tests may apply to one sheet or whole app
- With modular connected sheets, have unit/integration question - do you simulate inputs to one sheet, or test whole thing?
- Time: how do you handle time in testing?
- Randomness: the same


Design philosophy (or just how it turned out)
---------------------------------------------
- Lego - simple but v flexible, can attach special parts
  - tool-free, glue-free
  - nearly as strong as making from raw materials
- Flexible parts do could have use different syntax, different runners, different worksheets, etc
- AST exposed, use for dev tools
- Could gen AST differently

Random stuff
------------
- Functional test that auto compares data from api with data on page, finding it by class names and ids
- Template helpers that auto-gen tables from data
- Client app could be sequence of inputs and output updates
- Separate client app sequences from view for testing
- File input stream function - line at a time?
- Data difference function - useful for testing, detecting need for updates, other things?
- Data patch function - to convert one to another
- Multiple sheets under one web app
- Sheets in same app can communicate
- Sell app by one-off sub to registered users
- Use for configuring a conventional app - write connector funcs
- Poker or other card game


FA Cup simulation
-----------------
- Does draw randomly
- You enter chances of each team, it then adds a random factor to decide score
- Does draw when each round complete, repeat
- Timed pop-up of each match
