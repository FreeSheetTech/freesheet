Calculation worksheets
----------------------

As a learner or teacher building pages, non-technical but computer-literate,
I want an easy way of calculating values to use in the page

Requirements
------------
- Easily create a table to be used as a hidden worksheet
- Use a visible table as a worksheet
- Cells can contain formulas, including literal values
- Formulas resemble Excel formulas
- Functions in formulas should be easy to add - just JavaScript functions added to certain object? or global?
- Calculated cell values update named values that can be used in other formulas
- Named values can be used in Spacebars template fields anywhere on the page
- Calculations update automatically
- Formulas can bring in values from outside worksheet with functions
- Outside functions should include input values and time

To do
-----
    - Formula parser
    - Built-in functions
    - Use named value in template
- Add on function mechanism
    - Input function
- Timer function
- Apply to variety of situations
- Available in component script on any page - jQuery widget - like dataloader?



Later
-----
- Use named value in template without val
- Use with repeated rows
- Use to manipulate imported data
- Use with event streams
- Component that can be used elsewhere even outside Meteor

Formula language
----------------
    - Infix operators with precedence
    - Numeric operators:  + - * /
- Boolean operators:  and or not
    - Bracketed expressions
- if...then...else...
    - Function calls

Blaze Reactive computations implementation
------------------------------------------
- Table in page marked as worksheet
- Col 1 is names, col 2 is formula, col 3 is current value
- Values can be fixed values or formulas
- Values need to be:
  - reactive vars
  - visible in the worksheet on the page in debug mode
  - usable by name in template mustaches on the page
  - maybe persisted to local storage
  - maybe usable between pages
- Useful to use mustache formula style so consistent with other formulas on the page
- But Spacebars formulas are limited and unfamiliar
- Excel-style formulas would be powerful and familiar
- Poss: parse excel style expressions and translate to JS functions
- Somehow link these to autoruns and deps so they update a reactive dict
- Also work off input values directly - then parsing can be a formula in the worksheet
- Even better if can update in place and save back to original page
- peg.js parser for formula expressions
- On load and on change of formula, parse and evaluate each formula directly to value
- Done within autorun so picks up deps
- Names resolved against a context object provided to parser
- Context is a reactive dict
- Value from formula is put into context reactive dict
- Eval in place standard but can have relative cell refs and formula function
- Event streams - everything in sheet is a property (Bacon) or a hot value (Rx)
- Event streams - can be in sheet as as stream data type, with functions that act on streams and result in other streams or value types
- Separate sheets make natural components
- Simple text representation should be easy - name = formula, one per line
- Good error reporting important
- May have outbound event streams too
- Unit Testing - it's just a big function, so table of inputs vs expected outputs
- Testing with event stream inputs - just provide a list of events that have occurred vs an output state
  - but need to allow for relative sequence of events, so maybe need a table of streams and slots
- Testing outputs: expected state including a table of outgoing event streams and slots
- For debugging, need to know the dependencies (maybe transitive) of each named value
- Good to be able to highlight dependencies on worksheet
- So need a version of the parser that identifies the named values that each named value depends on as well as actual value - an option?


Problems
--------
- If helper not in template helpers when view rendered, can't be called, so no reactive dependency set up on that value, just get fixed null in view

RxJs implementation
-------------------

- Model/engine object
- Can add named "inputs" - cells or maybe streams
- Inputs will change over time - that's the whole idea
- OR inputs are just "grabbed" by provided functions
- OR inputs are declared and can only use a specific set of input functions
- Can add provided functions that can be called in formulas
- Functions return cells or maybe streams
- Can add named formulas that use inputs, external functions and other formulas
- Named formulas are available as outputs - cells or maybe streams
- Can add callback for value change
- All cells/streams produced by functions should be cached
- Can use all power of RxJS, but wrapped in easy to understand formulas
- Consider stream composition syntax as alternative to functions - different order of operations, each clearer in different situations
- Parser applied to whole worksheet produces a network of streams
- Formulas in network can be replaced on the fly
- Named values of formulas are all exposed as streams
- Parser applied to one formula produces an object with a list of names of input streams it requires, and a function that produces an output stream from them
- Parser result object always takes in and returns streams - may do ops on the streams like merge, or use map/combineLatest with a function acting on values
- Can subscribe to all named values to show in display
- Each named value must be a subject? So can show output immediately?  Wrap in BehaviorSubject null as default if not already a subject
- Stitch formula output stream into network with another subscribe/update on named value subject so can (a) build in any order (b) replace formula
-
- Tests - need to step through event sequences and show/check state at each step
- Tests - table of input events and expected/actual outputs after each one, time L-R inputs/outputs down each column - or time down the column?
  - if sequence unimportant, just becomes a decision table
- Debugging - step through table and see values change
- Later - define own formulas
- Later - private formulas or specific outputs
- Possible - a 'compile' function that produced a version without the extra stitching streams, or JS (or other lang) source for it so can be used elsewhere
- Possible - a graphical display of the network
- Possible - analyzer that found/checked/tested all the significant combinations of inputs
- Technical - split parsing from implementation - just return AST or pass in callback

Formula parsing for RxJS
------------------------
- Requirement is a stream that the named formula subject can subscribe to
- Parser returns a stream which may be subscribed to some input streams, and the stream names it has used
- OR could just return stream, worksheet notes which streams it has used
- OR could return a function that creates the stream, with list of stream names it needs
- Best if intermediate expressions do not create unnecessary streams BUT not that bad to start with
- Expressions of stream types need to create intermediate streams
- Expressions of value types need to produce functions to create the answer, not the actual answer
- Each expression parsed could produce its own function, these call each other
- Turn each expr into JS and eval inside a function body
- Errors: need to handle well eg !REF#
- Blanks/spaces/zeroes: need to handle well like Excel

Function calls
--------------
- Function types: Stream -> Stream, Value->value, value->stream, NOT stream-> value
- Input conversions: Stream, Value->value, value->stream, stream-> value
- Function calls - arguments can each be stream or value(must be literal?), output can be stream or value
    - input("nameField") -> stream: just call it and use the stream
    - square(stream) -> value: map on incoming stream using this function
    - square(number) -> value : effectively a constant, so just eval and use as a literal value
    - avg(stream, stream) -> value: combineLatest on incoming streams using this function
    - avg(stream, value) -> value: combineLatest on stream and just(value) using the function
    - merge(stream, stream) -> stream: just call with argument streams and use the stream
    - first(stream) -> value:
- If function with no inputs returns stream, return call to function eg currentTime
- If function with value inputs returns stream, call it and use the returned value eg input(fieldName)
- If function with stream and value inputs returns stream, call it and use the returned value eg pluck(stream, fieldName)
- If function with no inputs returns value, return call to function
- If function with value inputs returns value, need to convert all inputs to streams and return call to map or combineLatest with function and converted inputs
- If function with stream inputs returns stream, need to convert all inputs to streams, return call to function
- SO if function with args returns value, convert all inputs to streams (if they are not already) and use function with map/combineLatest
     otherwise use all args as they are and call the function
     - possibly convert args to types expected and call the function
- Can a subject be used as a stream?


Named values
------------
- Can subscribe multiple times to a named value
- Each subscription gets the current value (even if null) then changes
- New subscriptions do not get a replay of all values
- The named value can be reassigned to a new formula
- The initial value of the new formula (or null) is sent to subscriptions

Connection to page
------------------
- Init engine by adding built-in functions, including "input grabbers"
- On load, read worksheet and add named formulas
- Link outputs to page by setting their values in a ReactiveDict
- Link references in page via val helper, or via hook into lookup
- Show undefined formulas in worksheet on page

Issues
------
- Should inputs be explicit or just allowed anywhere in worksheet?
- Should outputs be explicit or just have any named value be an output?
- Input functions are different because they transform non-cell/stream objects, or nothing, to cells/streams
- Internal functions always act on cell/stream and produce cell/stream

Rx Notes
--------
- A just observable ends after it has been subscribed to
- If an input stream ends, the Subject connected to it also ends and is not restarted by another subscription
- For a fixed value, use a BehaviorSubject

Revision quiz
-------------

- How use worksheets to do a simple daily revision quiz, or a more complex SRS type
- Need to access a web service and/or local storage data
- Need to select words to show
- Need to do something with each word
- Need to do things with all the words - eg total answered, correct
- Need to record results
- Need to update the database via web service or local storage

Invoice with line items
-----------------------

- Invoice has Account No, Date, Delivery address, Default Tax rate, line item list
- Line item has description, units, unit price, optional tax rate
- Want to show for each line item: input data and price, tax, total
- Want to show for invoice: input data, no of items, item total, tax total, invoice total

How would you do...
-------------------
- A space invaders game
- A sequence of pages in an adventure game

How can it be easy to...
------------------------
- Set up calculations in a page
- Retrieve data from a web service or another page, and see it for debugging
- Define data in a page - in a similar way to calculations?
- Re-use data and/or calculation worksheets in other pages
- Represent multi-level nested data structures
- Keep a unified view of data and calculated data
- Link page controls to calculations as inputs
- Use calculated data in text
- Use calculated data in other elements
- Preview the page in action while working on it

Use cases
---------
- Standalone calculation and understanding engine eg pricing
- Run a worksheet as a server side API
- Database read and update
- Other web service access and filtering
- Programmer uses to generate JS and use in another program
- End user customises an application
- Embedded rules eg posting wizards in accounting system
- ETL


Parts needed
------------
    - Language definition
    - AST data structure definition
    - Text syntax definition
    - Text to AST parser
- AST to stream net builder - different to runner?
- AST to JS code generator
- Worksheet to AST converter
- Worksheet to AST to stream net live update
- AST to text converter
- AST to worksheet converter
- AST to worksheet live update
- Page to AST converter
    - Stream net runner
- Stream net to template updater
- Error handling mechanism

Next steps
----------
- Parse a whole worksheet as a function, not just individual formulas
- Make the function available for use elsewhere
- Make functions work on streams
- Instantiate multiple copies of the function
- Generate updating monitor display automatically
- Nesting updating displays
- Multiple updating displays for all usages of function
- Data loading functions
- Actions on output events

Future steps
------------
- Modularize into library
- Contributions mechanism
- Safe third-party JS
- Server side sheets for API
- Open source but pay for hosting
- Instant play and save
- JSFiddle-like instant worksheet page


