New Runner
==========

- Object with functions
- Functions generated almost directly from FS expressions
- Will still need Operations
- Will still need some of code generator
- Functions reference others via this
- Inputs are stored as a list
- Named values are also functions
- Need to know when to take all values of an input or only latest
- When change a function, need to re-run all inputs
- Need to know which function values have changed
- Rx may still have a place
- Should value changes be notified where still has same value - event stream view?
- Aim: to produce 'normal' JavaScript that would run as a standalone program

Working on stream instead of values
-----------------------------------
- Convention: all_xyz means the stream of xyz's instead of the latest value  ( allXyz too?)
- Only collected if needed
- If used in a function, create an all_xyz that returns this.stored.xyz
- Need to update stored.xyz after each input - but only if it was affected?
- Need to update stored.xyz before it is used
- Need to ensure stored.xyz updated exactly once for each input
- Need to update stored.xyz for each partial input
- Poss: input counter
- Poss: inputs received flag
- all_xyz adds the latest input to stored.xyz before returning it if not up to date, then marks as up to date
- Partial input flags all the stored.xyz as out of date
- After each partial input, call each all_xyz to ensure it stores the latest value
- Don't call other functions until input complete
- Could hold all values for all named values to help debugging
- Previous one would be useful for many things

Stage 1 of all_xyz
------------------
    - Collect all values of every named value in stored.xyz
    - Init stored.xyz to []
    - Flag upToDate on the array
    - Add an all_xyz function for every named value
    - partial input sets all upToDate to false
    - all_xyz calls xyz() and pushes on array if upToDate false, sets upTodate to true
    - Call every all_xyz after each partial input to ensure that input recorded

Stream Functions - producing zero or more outputs for one input
---------------------------------------------------------------
- eg merge, onchange, flatten/unpackLists
- When function called, need to know it is multiple outputs, not just one sequence
- Only reason need to see all of them and not just last one is if accumulating a downstream value in all_
- Poss: put each value in turn in the slot for that name, then recalculate every down stream all_
- Design problem: opposition of event push and recalculation pull viewpoints
- If can send partial input to a primary input, maybe can do it to an intermediate named value too
- Slots can take place of the subjects, hold Invalid value to show need recalculating, use value as cache
- If each slot calls its function to get new value, sets in its slot, then invalidates its descendants, then recalculates every all_
- If multiple output values, set each in slot and recalculate in turn
- Need to get multiple sheet value change events
- If subscribed to value changes on all_xyz, that would force separate events
- Could use Rx
- Could detect new values in inputs
- If no new value, named value is not updated
- If know current event name, can see which args to a function depend on it


Multiple outputs example
------------------------
  transactionList = input
  transactions = unpack(transactionList)
  creditTotal = sum(fromEach(select(all_transactions, type = 'C'), amount)
  debitTransactions = select(all_transactions, type = 'D')
  debitTotal = sum(fromEach(debitTransactions, amount))

Events on sheet
---------------
- Input event goes to an input from outside
- Sheet functions can raise events on sheet to any slot
- A sheet function may queue up multiple (or zero) events to its own slot - or others?
- Could have debugging or state restoration events to any slot from outside
- When ask for slot value (single):
  - this will always be a pull from a dependent slot
  - if invalid, run function to get next slot value and put in slot
  - return slot value
- Event queue and event loop:
  - Input events always go in a queue with name and value
  - From outside, queue the event and start event loop
  - Event loop takes first event and sends to sheet until queue empty
  - When queue empty, do input complete (recalculate and send value changes to listeners)
- Send to sheet
  - Puts that value in the slot
  - If the value has changed, invalidate all dependent slots
  - Whether changed or not, recalculate every dependent all_ slot
- When ask for slot value (multiple):
  - this will always be a pull from a dependent slot or value change observer
  - if invalid, run function to get next slot values and put first one in slot
  - queue up remaining values as events for this slot
  - return slot value
- Functions just do what they say on tin - return multiple values if there are multiple values - sheet uses that

New value question
------------------
- Key to making the sheet work is being able to answer the questions: has this function got a new value?
- Second, separate question is: has this function got a changed value?
- A new value means a new event through the chain from an input
- At a stream function, there may or may not be a new value
- A normal function needs to know whether any of its input expressions have a changed value
- A stream function needs to know which of its input expressions have a new value to decide whether it has a new value
- Essential for stream function, possible optimisation for normal function

Pull or push?
-------------
- Input event can find all values that are dependent on it and invalidate/recalculate them
- Values can recalculate themselves and all the values they depend on in turn
- Stream functions change the question because they may or may not produce new values for their dependents
- Must capture new values for all_ functions after every input but don't want to recalculate others until input complete
- Poss: new value pass and changed value pass
- Poss: push - for each input with new value, recalculate immediate descendants.
- Linked with other differing views: analogue/digital, event/signal
- Events and time dimenstion bring two things: outputs based on event arriving, and memory of previous inputs


New value implementations
-------------------------
- Stream function needs to be able to have a call like newValue(expr) that returns the value or 'no new value'
- An all_ function needs the same
- Maybe getValue, returns a wrapper with value and new flag
- Maybe hasNewValue(expr)
- Poss: listeners for which functions called, look for ones hitting the new input
- What happens when go through multiple stream functions?
- Maybe all_ and cached value call getNewValue(expr) - expr needs to be a function
- In cached value, expr is a function anyway.  In stream functions, need to generate code that way
- Poss: event cycle and input cycle (to complete) - store value state just for this cycle
- When get to new value, which may not be an input, don't need to go any further
- Things to know about each value: the value, is valid, is changed, is new
- Poss: each cached value function logs the call.  One use for this is tracing, another is to flag if new value hit
- New value would also need to be true for all cached values that depend on it, until hit a stream function
- New value cannot be determined just by dependency tree - actually need to do the calculation - so favour pull approach
- When pull reaches a stream function, that function determines whether value is new or not
- What happens with stream functions used in expressions within a function?  What if no new value? No new value for this function either?
- When no there is no new value, need to cache that so don't ask again

Input cycle
-----------
- Sheet has steady state, and input cycle with nested event cycle
- Do not allow partial inputs - can't have clients leaving sheet in an inconsistent state
- Do allow multiple inputs treated as one 'transaction'
- Steady data: functions, current value, all values
- Input cycle: invalid current values, invalid all values, changed values
- Event cycle: new values


Errors in cached values
-----------------------
- If a function results in an error, want that to propagate through to dependents
- Want the result of all dependent calculations to be that error, not treating it as an object to give something like  'Hi' + error.toString()
- Getting sheet value at outside has to catch error and return as object
- Exception should be thrown out through all called functions and not cached

To do
-----
    - No need to generate code for inputs or have input pulling functions
- Unit test functions using
- Do we need subjects for functions with args?
- Do we need subjects at all?



Possible optimisations
----------------------
- Cache function values
- Work out what functions might be affected by an input
- Memoise functions for certain arguments
- Autogenerate objects with functions attached
- Change full scans to fold operations using only the latest value
- In production mode, reduce the number of previous held
- Wrap all functions generated in a manager function that can memoise and trace
- Could profile time spent in each function and number of calls
- Store dependencies of each function and invalidate only those
- Only invalidate if function value changes (so need previous)
- Don't depend on people writing functions a certain way
- Only produce sheet value change events if anyone listening
- Only produce unbuffered value change events if anyone listening
- Only invalidate dependents after an event if your value has changed

Incremental updates
-------------------
- How to translate functions into previous plus latest input
- If every aggregate function is a fold, not matter if have lots of sums inside a final aggregate
- Memoise aggregate functions by arguments
- Functions get access to previous value plus any other data they want to keep eg previous distinct values, no of values
- A select just needs the previous values, plus new one, plus the select function

Memoising
---------
- Each usage of a function gets a unique id passed to it somehow OR each usage of a function is wrapped in a memoiser
- All function calls given their own name even if they are sub-exprs - would only work within a no-args function

Change prediction
-----------------
- How limit updates to only the entities affected by an input eg account and new transaction

Storing state
-------------
- How to cache and persist values so far for an entity
- Memoise with id arg = entity
- Don't memoise functions that don't call other functions
- Memoise functions that call an all_xyz anywhere below them
- Memoise no-args functions

Full recalculation approach
---------------------------
- Could this work?
- Pull point of view
- Idea is that calculating values once not too expensive - it's many times that hurts
- Cache each value
- No invalidation - just recalculate everything
- Use Rx or just compare with previous sheet to see which values have changed
- New sheet after every input/event
- Time dimension for all_ and stream functions
- Sort of functional approach: current state, event -> new state
- Stream functions could be regarded as inputs that supply themselves - even for first/only value

Transformer network approach
----------------------------
- Combines Push point of view and pull point of view
- Every named value is a node that knows its dependents
- Or knows its dependents' names to allow loose coupling
- Each node can calculate its value
- Each node pushes events to dependents
- Still use generated simple functions


Incremental state approach
--------------------------
- Cache is dumb
- Input cycle function maps old cache, functions, events -> new cache, new values, changed values

New values approach
------------------
- Generated functions return only a set of new values - which may be empty
- Cannot be used for static calculations - or maybe it can if supply no old values
- Lose closeness with underlying FS expressions - but that only held for static functions anyway
- Functions must return a new value iff input expr or arguments is a new value
- Values passed into functions are always wrapped
- Input function returns a new value if the event is for it
- Functions called with a this which contains the operations and a datastore for storing persistent data like past values
- Need a different data store for every use of the function
- Could this lead to easy memoisation?
- Can implement all() with this mechanism
- Good to allow swapping expression while maintaining existing stored values
- Code gen: all operations functions with value sets, or collect other functions used and pass values into function args
- Or forget code generation - just create a network of function objects
- Decouple by name at function boundaries to allow replacement

Provided functions
------------------------
- For simple function only:
- Wrapped in ExpressionEvaluator
- New instance each time used
- getNewValues: if any arg has new values, array with getLatestValue
- getLatestValue: function called on latestValues for each arg
- Should give new values if function itself is changed


