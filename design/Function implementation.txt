Function implementation
=======================

Transform functions for sequences and objects
---------------------------------------------
- Implementation:
- Output must change if any of the values affecting the transform function change
- So need to combine the input stream with a stream delivering the transform function
- So need to create a JS function from an expr
- Seems similar to allowing user-defined functions - and the expr is actually a special case of a user-defined function with one arg
- So need a mechanism to combine a set of streams to create a function - is this the best way of implementing?
- Need to consider the special requirements of name scoping from input value and output value
- Output value names will apply to any aggregation expression, so handle that there - and not in first cut
- Poss: generated function has input as a parameter, and so can be used its values
- Poss: generated function has internal function that looks through result, input and external values fro a named value
- Will need to generate correct JavaScript for literals, at least - quotes on string values, etc
- Transform function needs to use current values from the streams that affect it, but have only the 'current input' as a parameter

Transform functions with code generation
----------------------------------------
- Need to generate code for transform function calls that has action function as an argument and calls it
- Need to know at code generation time that the second expr represents a function, not a value
- Need to create a function stream for the action function when getting provided function stream
- So give code generator a set of transform functions to treat differently
- Code gen can generate function inline as local function?
- Add any function calls to set for overall expr so appear as args to outer function and can be referenced in the local function


Transform functions that use provided functions
-----------------------------------------------
- Will pass values from input to the functions
- If provided function is value, then need to make it available to transform function code - inject a var
- If provided function is stream, eg input(id), need the stream that comes from calling it with that value
- (Probably) want to cache streams from each separate set of args passed to that function, so save  input('name'), input ('age'), etc streams
- Need the external functions available in the generated function somehow - pass in a context object as an extra argument?
- Seems really simple, but this is a very tricky bit
- When value from transformed item is used as a parameter to a provided function call, can't completely precompile the function eg input(id)
- When transform function calls a provided stream function, needs to turn that into a plain value to use in the expression eg input(id)
- Is this a sign that functions without RT are bad?
- Functions should not have context - just inputs and outputs - so how does that work with exprs passed to other functions?
- The expr for a transform function is actually a shorthand for an expr that produces a function with one argument, or a stream of functions with one argument
- The expr function actually has an input for each named value or function it uses, but they are curried to produce a function with a single argument
- What names mean in the text syntax is separate from the context of the runtime values they become
- A provided stream function with no arguments produces a stream of values, which could be a stream of functions with no arguments
- A provided stream function with arguments actually needs to produce a stream of functions taking those arguments
- Generated transform function needs to be able to access that function and call it normally
- Generated transform function cannot have function baked in as a literal.  Pass in via operations/context object?

Functions with arguments, expressions producing functions
---------------------------------------------------------
- Don't have to convert the expr to a native function - could evaluate
- Native JS functions may lead to better performance
- Producing functions should be just like producing any data value
- Using a function should be just like using a data value - sequences and aggregates are functions really, literal values just () => value
- But the functions need to be pure functions with RT - so context is a non-starter, but closures could be useful
- Functions all the way down - a literal can be a function with no args that always produces the same value
- Have kept away from functions with args, but may need to introduce them now
- All functions have arguments - no args is a special case
- Using inputs from outside within exprs will just lead to trouble - must be input parameters
- Don't pass an 'unfinished' function that needs to pull values in from outside when evaluated - get the values and produce a pure function
- Already have exprs that evaluate to functions with no args - need to have exprs that evaluate to functions with arguments
- Actually already producing sequences and aggregations, which are effectively functions with arguments
- If can insert vars in a generated function, can insert function code
- User-defined function with args leads to a stream of functions which change as the other streams used in the expr change
- Could see (or implement) a user-defined function with no args as leading to a stream of no-args functions
- A function with arguments can have all the arguments supplied and therefore be "curried" to a function with no arguments (or one arg for a transform function)
- So rather than looking at "evaluation instances" of a function, are we looking at just producing a different function, with no args?
- Why do functions need to be separate worksheets? Just define as you do named values
- Collect inputs used in an expression as vars for its generated function - may need to do this recursively
- Choice between introducing extra streams for sub-exprs of a definition or just generating a JS function for the whole thing - have done both in different places
- If all JS, could we possibly remove the distinction between different kinds of functions?
- Or should we make the distinction even clearer - there are input streams and provided value functions?
- Generated functions could have source expression attached to them to help debugging
- Generated functions could have the values of each named value in the expression at the time of generation attached to them
- To allow generated functions to use both values and functions, need to pass in a context object
- Produce a curried function that fixes the context object at the point it is used
- If going to generate code, might as well generate whole expr as one function

Functions with arguments - examples
-----------------------------------
- Does not use values from elsewhere in the worksheet:
    totalPrice(base, markup, taxRate) = (base + markup) * (1 + taxRate)
    widgetBase = basePrice("widget")
    widgetMarkup = widgetBase * (1 + markupRate(widgetBase))
    taxRate = 0.2
    widgetPrice = totalPrice(widgetBase, widgetMarkup, taxRate)

- Uses values from elsewhere in the worksheet:
    taxRate = 0.2
    markupRate = 0.5
    totalPrice(base) = base * (1 + markup) * (1 + taxRate)
    widgetBase = basePrice("widget")
    widgetPrice = totalPrice(widgetBase)

Provided function types
-----------------------
- User defined functions give you streams of values (no args) or functions (with args)
- Provided functions should do the same
- The types of function are how you call them, not what you get
- Its actually the individual arguments that are value or stream, not the function or its return type
- Possible types for any individual argument are value, stream or function
- Current function kinds just show whether the provided function needs to be wrapped in a stream or already is one
  - this is completely separate to what types the arguments need to be
- Transform functions are a bit special but can still fit into argument type scheme
- Need to allow for transform functions that act on stream, not a sequence that is one value in the stream

Stream functions
----------------
- Examples:
    addFive = <function needing value input>
    total = <function requiring stream input>
    b = consecutiveInputs()
    c = 10
    a = addFive(b)                  ==> combine(b, function(xb) { return addFive(xb) })
    tot = total(b)                  ==> total(b)
    tot5 = total(addFive(b))        ==> total( combine( b, function(xb) { return addFive(xb) })
    tot5a = total(b + c)            ==> total( combine( b, c, function(xb, xc) { return xb + xc })
    totPlus = addFive(total(b))     ==> combine( total(b), function(x) { return addFive(x) })
    totPlusa = total(b) + c         ==> combine( total(b), c, function(x, c) { return x + c })
    totXX = total(addFive(b)) + addTen(c)
        ==> combine( total( combine( b, function(x) { return addFive(x) })), c, function (x,y) { return x + addTen(y) } )

    nested1 =   addFive( aValue( addTen(c) + addFive(d) ) + addTen(e))
        ===> combine( c, d, e, function(c, d, e) { return addFive( aValue( addTen(c) + addFive(d) ) + addTen(e)) })

    nestedTot = addFive( total( addTen(c) + addFive(d) ) + addTen(e))
        ===>    totStream = total( combine( c, d, function(c, d) { return addTen(c) + addFive(d); } ))
                combine( totStream, e, function (totStream, e) { return addFive( totStream + addTen(e)

- Code generation --
- Has to generate code to create a stream function
- Functions that take stream arguments have to have args supplied as a stream
- Code generator needs to generate all the code for a user function definition because needs to include the combines
- Runner can take this code and wrap it in a new Function and call it once to get the source
- Static code generator could use the code as is
- Code generator needs to know whether the expression for each function argument is stream or value
- Generator needs to be able to generate code for an expr and wrap it in a stream
- Need to know functions called in that expr to get the params for the combine
- Also need to roll up functions called into outer expr to get streams needed
- Remember: all arguments to the generated function are streams - even provided functions

- Code to generate for an expr --

- At top-level function body:
    - depends on return type of expr
    - if expr is a function call
        - if return kind is value: combine
        - if return kind is stream: as is
    - else
        - combine or subject

- Inside exprs:
    - depends on how expr is being used, not on expr itself
    - if expr is an arg to a stream arg: combine expr
    - if expr is an arg to a value arg: just the expr

- So need to know return kind as well as arg kinds
- All functions need to end up taking and returning streams - value functions just a convenience for provider
- Doesn't make much sense to have arg kind different to return kind
- At outer level needs to create a combine call for all referenced streams
- Most streams will be user defined functions
- A stream function creates its own local stream within the expression
- A stream function argument requires a combine of all the streams that sub-expression
- Those streams are still needed at the outer level arguments, but will not appear in the outer level combine
- So really need recursive generate calls and to get the function calls just for a sub-expression
- Clearer if local streams declared as vars in generated code - need to have deeper ones declared first
- So need to return local streams created as well as external functions referenced

- For stream function code generation, we need to:
   - accumulate function name of function itself up to top level
   - accumulate function names of functions used in arguments up to top level
   - create a local stream name
   - create a local stream expr - combine names of this expr and arguments if multiple inputs
   - accumulate the local stream up to top level
   - use the local stream name as the expr
   - Use the local stream name in the combine at the next level
   - Use the function names from this expr and arguments in the combine of the local stream expr
   - Do not pass the function names from this expr or arguments to the combine at the next level

- For stream functions in runner, we need to:
  - provide the stream function to the expr function as a function, not wrapped in a stream

- Stream functions of two kinds: they transform the stream input, or they create a stream depending on the current value of the input

Streams and sequences
---------------------
- itemsOf - could be just a marker to say 'generate different code'
- Really just getting a different stream either way
- Maybe generating code for overall exprs so don't have separate stream for each expr now makes this more difficult

Most local scope implementation
-------------------------------
- Could have a one-off context object passed to each function
- Context contains all the arg streams
- Context also passed to transform functions, with _in
- Local names can be added as they are generated - will overwrite ones already there
- Restriction that a local name must be defined before it can be accessed
- OR generate a context inside each function from the args  - then functions called normally
  - add everything from _in to the context, but _in still available
  - add local names to the context as they are generated
  - allows for a let syntax if desired
- Local vars are automatically a local context
- Need to know which names are top-level so can put them in the combine statement - how?
- Example of code generated without local names:
    scores = fromEach( games, {basicTime: in.time, fullTime: time + 2, maxTime: basicTime + 3} )
    ==>
    createFunction function anonymous(operations,_ctx) {
        return operations.combine(_ctx.fromEach, _ctx.games, _ctx.time, _ctx.basicTime,
            function(fromEach, games, time, basicTime) { return fromEach(games, function(_in) {
                return {basicTime: (_in).time, fullTime: operations.add(time, 2), maxTime: operations.add(basicTime, 3)} }); });
    }

- Example of code required for local names:
    scores = fromEach( games, {basicTime: in.time, fullTime: time + 2, maxTime: basicTime + 3} )
    ==>
    createFunction function anonymous(operations,_ctx) {
        return operations.combine(_ctx.fromEach, _ctx.games,
            function(fromEach, games) { return fromEach(games, function(_in) {
                var basicTime = (_in).time;
                var fullTime = operations.add(time || _in.time, 2);
                var maxTime = operations.add(basicTime, 3);
                return {basicTime: basicTime, fullTime: fullTime, maxTime: maxTime} }); });
    }

- To know whether its a local var: is it in an aggregate being generated?
- Do you need to know all the top-level functions before you generate code?
- Would you have to regenerate all the code every time you added a function?
- Why not restrict local names to those known at the time eg aggregate members and maybe let definitions in the future?
  - qualify input items with in if want to use them
  - keeps away from the strange behaviour you might get if in names automatically available unqualified
  - can use other ways to copy all of input aggregate members to output

- So required original expression and code is
    scores = fromEach( games, {basicTime: in.time, fullTime: in.time + 2, maxTime: basicTime + 3} )
    ==>
    createFunction function anonymous(operations,_ctx) {
        return operations.combine(_ctx.fromEach, _ctx.games,
            function(fromEach, games) { return fromEach(games, function(_in) {
                var basicTime = (_in).time;
                var fullTime = operations.add((_in).time, 2);
                var maxTime = operations.add(basicTime, 3);
                return {basicTime: basicTime, fullTime: fullTime, maxTime: maxTime} }); });

- So approach is easy:
  - when generating code for an aggregate, define all vars in order, just use them in the map expression at the end
  - don't accumulate functions if they are aggregate members