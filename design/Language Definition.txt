Language Description
====================

Frame runtime
-------------

Holds built-in named Functions added by the creating program
Holds named Functions added from user programs
Runs a named function and returns its value
Manages instantiations of Functions so that each is isolated

Function usage
--------------

An instantiation of a function with a set of input streams and a single output stream
Knows its function definition and where it is used
Constructs streams around functions that take or return normal values



Parser
------
Reads one of the representations and constructs a map of named user Functions


Function - built-in
-------------------

A Function implemented in the underlying language
Knows whether each of its arguments and its return type are streams or normal values
Does not have access to other functions by name in the runtime


Function - user
---------------
- A set of named arguments, which may be empty
- Knows where it is used
- A single output expression
- Possible: a set of named internal expressions
- Possible: a set of named output expressions

Expression
----------
One of:
 -literal value
 - sequence
 - aggregation of named items
 - function call with other expressions as arguments
Knows its parent expression?



Inputs and Outputs
==================


Representations
===============

AST
---
Objects representing functions and expressions

JSON
----
JSON representation of AST objects


Text
----

script: zero or more function definitions

function definition: functionName = expr

function definition with args: functionName([argName...]) = expr

function call: functionName([expr...])

infix expressions: expr op expr [op expr]

bracketed expressions: (expr)

string literal: "<chars>"

number literal: nn.nnn

date literal:

date-time literal:

sequence: [expr, ...]

aggregation: { name: expr, ... }

select from aggregate: agg.itemNameLiteral
select from aggregate: agg[itemExpr]

select from sequence: seq[indexExpr]

infix operations: + - * / and or not == != > >= < <=

Possible changes: xxxOf(anAggregate) where xxx is the name of any item in the aggregate



HTML
----

function definition: element class=function-name + following expression element class= expression.  Could be any siblings - divs, tds

sequence: ol + li - or maybe table with one column

aggregation: table with two columns

other expressions: as for text representation


Time
----
- DateTime built in type
- Period built in type
- Addition and subtraction with DateTime and Period
- Addition and subtraction with Period and Period
- Subtraction with DateTime and DateTime
- Comparison with DateTime and DateTime
- Functions to create Periods: seconds(), minutes(), ...weeks()
- Periods stored as number of millis
- Later: Periods with months and years, held and calculated separately - probably CalendarPeriod, different to Period
- Functions to express Periods in different ways - secondsOf, asSeconds
- now() is the current time

Name scope
----------

- Top-level function definitions - anywhere
- current input to function - when transforming a stream or sequence of aggregation objects - prefixed in
- current aggregation expression - when constructing an aggregation - prefixed out
- Poss: automatically take most local scope: current expr, current input, top-level - convenient and intuitive
- Poss: always take top-level scope, need to prefix others
- If take most local, could use items for different scopes for different elements if some elements didn't contain the name - v confusing
- Prefix names: in/out, current/this


Issues
======

- What differences between Application and Function?  Does App just map set of input event sequences to set of output sequences ?
- Can any function be used as an App? Any function with no args?